plugins {
	id "java"
	id "signing"
	id "maven-publish"
//	id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

group = "com.pockettheories"


// configure all java components to be published
publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

// ossrh requires javadoc and sources https://central.sonatype.org/pages/requirements.html
java {
	withJavadocJar()
	withSourcesJar()
}

// ossrh requries signing https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/signing_plugin.html
// this only configures signing if the key is found
// For signing you need to make signingKey and signingPassword available properties See https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
// The following makes the key available via the Gradle Property signingKey
// export ORG_GRADLE_PROJECT_signingKey=`cat test-private.pgp`
// export ORG_GRADLE_PROJECT_signingPassword="password"
// After making the Gradle properties above available, you can try signing using
// ./gradlew signMavenPublication
//
// NOTE: If you are using the legacy publishing you need to sign using the info at https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signing_pom_files
def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingSecretKeyRingFile")
if(hasSigningKey) {
	sign(project)
}
void sign(Project project) {
	project.signing {
		required { project.gradle.taskGraph.hasTask("publish") }
		def signingKeyId = project.findProperty("signingKeyId")
		def signingKey = project.findProperty("signingSecretKeyRingFile")
		def signingPassword = project.findProperty("signingPassword")
		if (signingKeyId) {
			useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
		} else if (signingKey) {
			useInMemoryPgpKeys(signingKey, signingPassword)
		}
		sign publishing.publications.maven
	}
}

// customize the pom so it complies to Maven central requirements https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
	PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
	publishing.publications.withType(MavenPublication).all { mavenPublication ->
		mavenPublication.pom {
			name = "${project.group}:${project.name}"
			description = name
			url = "https://github.com/nitredd/atlasSearchSpringDataMongoDB"
			packaging = "jar"
			licenses {
				license {
					name = "LGPL3"
					url = "https://www.gnu.org/licenses/lgpl-3.0.en.html"
				}
			}

			developers {
				developer {
					id = "redknitin"
					name = "Katkam Nitin Reddy"
					email = "redknitin@gmail.com"
				}
			}

			scm {
				connection = "scm:git:git://github.com/nitredd/atlasSearchSpringDataMongoDB.git"
				developerConnection = "scm:git:ssh://github.com/nitredd/atlasSearchSpringDataMongoDB.git"
				url = "https://github.com/nitredd/atlasSearchSpringDataMongoDB"
			}
		}
	}
}

nexusPublishing {
	repositories {
//		sonatype()

		// OR, if you registered with Sonatype after 24 February 2021
		 sonatype {
			    nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			    snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		 }
	}

	// these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
	// If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
	connectTimeout = Duration.ofMinutes(3)
	clientTimeout = Duration.ofMinutes(3)
}

// configure publishing to a local directory for testing (not necessary)
// ./gradlew publishMavenToLocal
// tree ./build/repos/releases
publishing {
	repositories {
		maven {
			name = "local"
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "$buildDir/repos/releases"
			def snapshotsRepoUrl = "$buildDir/repos/snapshots"
			url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}


repositories {
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
	implementation 'org.springframework.data:spring-data-mongodb:3.4.0'
	implementation 'org.mongodb:mongodb-driver-sync:4.6.0'
	testImplementation "junit:junit:4.11"
	//See: https://stackoverflow.com/questions/38385680/build-error-with-gradle-could-not-find-method-testcompile
}

test {
	systemProperties(System.getProperties())  // For passing MONGOURI
}

